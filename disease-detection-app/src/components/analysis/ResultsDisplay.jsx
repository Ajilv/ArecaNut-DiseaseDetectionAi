import React, { useState } from 'react';
import { CheckCircle, AlertTriangle, Clock, Download, Share2, ArrowLeft, FileText, Stethoscope, Heart, ChevronDown, ChevronUp } from 'lucide-react';
import { API_BASE_URL } from '../../utils/constants';

const ResultsDisplay = ({ result, onNewAnalysis }) => {
  const [showRecommendations, setShowRecommendations] = useState(true);
  const [showRemedies, setShowRemedies] = useState(true);

  const formatTextWithMarkdown = (text) => {
    if (!text) return '';
    return text
      .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
      .replace(/\n/g, '<br />')
      .replace(/^\d+\.\s/gm, '<br />$&');
  };

  const handleDownloadReport = () => {
    const reportContent = `
Disease Detection Analysis Report
================================

Analysis Date: ${new Date(result.created_at).toLocaleString()}
Analysis ID: ${result.id}

ANALYSIS RESULT:
---------------
${result.result}

${result.recommendations ? `
MEDICAL RECOMMENDATIONS:
-----------------------
${result.recommendations}
` : ''}

${result.remedies ? `
SUGGESTED REMEDIES:
------------------
${result.remedies}
` : ''}

IMPORTANT DISCLAIMER:
--------------------
This analysis is for informational purposes only and should not replace professional medical advice. 
Please consult with a qualified healthcare provider for proper diagnosis and treatment.

Generated by MediDetect Platform
    `.trim();

    const blob = new Blob([reportContent], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `analysis-report-${result.id}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  const handleShare = async () => {
    const shareData = {
      title: 'Medical Analysis Result',
      text: `Analysis Result: ${result.result.substring(0, 100)}...`,
      url: window.location.href,
    };

    if (navigator.share) {
      try {
        await navigator.share(shareData);
      } catch (err) {
        console.log('Sharing cancelled or failed');
      }
    } else {
      try {
        await navigator.clipboard.writeText(`${shareData.text}\n${shareData.url}`);
        alert('Results copied to clipboard!');
      } catch (err) {
        console.error('Failed to copy to clipboard');
      }
    }
  };

  return (
    <div className="max-w-4xl mx-auto p-6 space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <button
          onClick={onNewAnalysis}
          className="flex items-center space-x-2 text-gray-600 hover:text-gray-900 transition-colors"
        >
          <ArrowLeft className="w-4 h-4" />
          <span>New Analysis</span>
        </button>

        <div className="flex items-center space-x-3">
          <button
            onClick={handleShare}
            className="flex items-center space-x-2 px-4 py-2 text-gray-600 hover:text-gray-900 border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors"
          >
            <Share2 className="w-4 h-4" />
            <span>Share</span>
          </button>

          <button
            onClick={handleDownloadReport}
            className="flex items-center space-x-2 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
          >
            <Download className="w-4 h-4" />
            <span>Download Report</span>
          </button>
        </div>
      </div>

      {/* Main Results Card */}
      <div className="card">
        <div className="flex items-center space-x-3 mb-6">
          <div className="p-2 bg-green-100 rounded-lg">
            <CheckCircle className="w-6 h-6 text-green-600" />
          </div>
          <h2 className="text-2xl font-semibold text-gray-900">Analysis Complete</h2>
        </div>

        {/* Analysis Result Section */}
        <div className="bg-green-50 border border-green-200 rounded-lg p-6 mb-6">
          <h3 className="text-lg font-semibold text-gray-900 mb-3 flex items-center space-x-2">
            <FileText className="w-5 h-5" />
            <span>Analysis Result</span>
          </h3>
          <div
            className="text-gray-800 leading-relaxed"
            dangerouslySetInnerHTML={{
              __html: formatTextWithMarkdown(result.result),
            }}
          />
          {result.file && (
            <div className="mt-4">
              <img
                src={`${API_BASE_URL}${result.file}`}
                alt="Uploaded image"
                className="max-h-64 max-w-full rounded-lg shadow-md border"
              />
            </div>
          )}
        </div>

        {/* Medical Recommendations Section */}
        {result.recommendations && (
          <div className="mb-6">
            <button
              onClick={() => setShowRecommendations(!showRecommendations)}
              className="w-full flex items-center justify-between p-4 bg-blue-50 border border-blue-200 rounded-lg hover:bg-blue-100 transition-colors"
            >
              <h3 className="text-lg font-semibold text-gray-900 flex items-center space-x-2">
                <Stethoscope className="w-5 h-5 text-blue-600" />
                <span>Medical Recommendations</span>
              </h3>
              {showRecommendations ? (
                <ChevronUp className="w-5 h-5 text-blue-600" />
              ) : (
                <ChevronDown className="w-5 h-5 text-blue-600" />
              )}
            </button>

            {showRecommendations && (
              <div className="mt-4 p-4 bg-white border border-gray-200 rounded-lg">
                <div
                  className="text-gray-700 leading-relaxed prose max-w-none"
                  dangerouslySetInnerHTML={{
                    __html: formatTextWithMarkdown(result.recommendations),
                  }}
                />
              </div>
            )}
          </div>
        )}

        {/* Remedies Section */}
        {result.remedies && (
          <div className="mb-6">
            <button
              onClick={() => setShowRemedies(!showRemedies)}
              className="w-full flex items-center justify-between p-4 bg-green-50 border border-green-200 rounded-lg hover:bg-green-100 transition-colors"
            >
              <h3 className="text-lg font-semibold text-gray-900 flex items-center space-x-2">
                <Heart className="w-5 h-5 text-green-600" />
                <span>Suggested Remedies</span>
              </h3>
              {showRemedies ? (
                <ChevronUp className="w-5 h-5 text-green-600" />
              ) : (
                <ChevronDown className="w-5 h-5 text-green-600" />
              )}
            </button>

            {showRemedies && (
              <div className="mt-4 p-4 bg-white border border-gray-200 rounded-lg">
                <div
                  className="text-gray-700 leading-relaxed prose max-w-none"
                  dangerouslySetInnerHTML={{
                    __html: formatTextWithMarkdown(result.remedies),
                  }}
                />
              </div>
            )}
          </div>
        )}

        {/* Analysis Details */}
        <div className="pt-6 border-t border-gray-200">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div className="flex items-center space-x-3">
              <Clock className="w-5 h-5 text-gray-400" />
              <div>
                <p className="text-sm font-medium text-gray-900">Analysis Date</p>
                <p className="text-sm text-gray-600">{new Date(result.created_at).toLocaleString()}</p>
              </div>
            </div>

            <div className="flex items-center space-x-3">
              <FileText className="w-5 h-5 text-gray-400" />
              <div>
                <p className="text-sm font-medium text-gray-900">Analysis ID</p>
                <p className="text-sm text-gray-600">#{result.id}</p>
              </div>
            </div>
          </div>
        </div>

        {/* Disclaimer */}
        <div className="mt-6 p-4 bg-amber-50 border border-amber-200 rounded-lg">
          <div className="flex items-start space-x-3">
            <AlertTriangle className="w-5 h-5 text-amber-600 flex-shrink-0 mt-0.5" />
            <div>
              <h4 className="font-medium text-amber-800 mb-1">Important Disclaimer</h4>
              <p className="text-sm text-amber-700">
                This analysis is for informational purposes only and should not replace professional medical advice.
                Please consult with a qualified healthcare provider for proper diagnosis and treatment.
              </p>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default ResultsDisplay;